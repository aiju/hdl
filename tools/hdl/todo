spec (&maybe implementation)
- maybe harmonize clock definitions with the other type words
- define precisely ==, !=, === and !==
- functions (also in fsms)
- branching pipelines
- support [] with the lhs not an l-value

future ideas (not necessarily good)
- rotation operators
- change i++ to be expressions, like in C
- fixed-point arithmetic (core language or library?)
- operator overloading
- vector parallel operations (i.e. iterate over all components)
- hierarchical references
- switch fallthru statement
- UTF-8 in symbols (need to translate to Verilog somehow...)
- allow attaching @valid to a signal definition so that reference to the signal always invoke @valid
- allow definition before use

implementation
- support 'variable splitting' (variables with bits that are independent)
- handle 'latch-like' behaviour (by muxing registers)
- struct parameters
- fix pack-defs
- async signals
- comma operator as an lval
- bitvector and array literals
- implement @ and #
- nested modules
- compensate for verilog expression width behaviour
- non-synchronous initializations need to have reset values propagated to other signals
- pipeline implementation is still pretty rough. it would be nice if it could share could with semc since it's doing many similar things.

questions
- how meaningful is it to speak of the signedness of an infinite bitvector?
- should @ be zeroes or undefined at the beginning? if it is zeroes, it would be legal to do 1@x to find out if x has ever been true.
- should fsm semantics be changed to be more like pipelines? e.g. should x++ in a fsm state compile to x' = x + 1?
- >> and >>> are kind of messed up right now. Would need to either
	- merge them into one operator
	- have them give a result of the original width
