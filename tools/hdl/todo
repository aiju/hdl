spec (&maybe implementation)
- maybe harmonize clock definitions with the other type words
- define precisely ==, !=, === and !==
- functions (also in fsms)
- pipeline blocks
- support [] with the lhs not an l-value

future ideas (not necessarily good)
- rotation operators
- change i++ to be expressions, like in C
- fixed-point arithmetic (core language or library?)
- operator overloading
- vector parallel operations (i.e. iterate over all components)
- hierarchical references
- switch fallthru statement
- UTF-8 in symbols (need to translate to Verilog somehow...)

implementation
- support [] lvals
- handle 'latch-like' behaviour (by muxing registers)
- struct parameters
- fix pack-defs
- async signals
- comma operator as an lval
- bitvector and array literals
- implement @ and #
- nested modules
- compensate for verilog expression width behaviour

questions
- how meaningful is it to speak of the signedness of an infinite bitvector?
- should @ be zeroes or undefined at the beginning? if it is zeroes, it would be legal to do 1@x to find out if x has ever been true.
