void *emalloc(int);
int yylex(void);
void error(Line *, char *, ...);
int parse(char *);
ASTNode *node(int, ...);
ASTNode *nodecat(ASTNode *, ASTNode *);
ASTNode *newscope(int, Symbol *);
void scopeup(void);
Symbol *decl(SymTab *, Symbol *, int, int, ASTNode *, Type *);
Symbol *getsym(SymTab *, int, char *);
ASTNode *fsmstate(Symbol *);
void fsmstart(ASTNode *);
void fsmend(void);
void typeor(Type *, int, Type *, int, Type **, int *);
Type *type(int, ...);
void enumstart(Type *);
Type *enumend(void);
void enumdecl(Symbol *, ASTNode *);
void checksym(Symbol *);
void astprint(ASTNode *);
void consparse(Const *, char *);
void typecheck(ASTNode *);
void typefinal(Type *, int, Type **, int *);
ASTNode *nodedup(ASTNode *);
int consteq(Const *, Const *);
int nodeeq(ASTNode *, ASTNode *, void *);
int ptreq(ASTNode *, ASTNode *, void *);
ASTNode *mkcint(Const *);
ASTNode *descend(ASTNode *, ASTNode *(*)(ASTNode *));
ASTNode *cfold(ASTNode *);
void compile(ASTNode *);
#define nodeput free
OpData *getopdata(int);
#define warn error
ASTNode *fsmgoto(Symbol *);
